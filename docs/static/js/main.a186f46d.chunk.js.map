{"version":3,"sources":["components/ToolBar/index.js","components/Layouts/cards/index.js","components/Statistics/index.js","components/List/index.js","components/Map/Table.js","components/Map/index.js","components/Layouts/Loading/index.js","App.js","hooks/useAxios/useAxios.js","index.js"],"names":["ToolBar","countries","country","handleCountryChange","className","src","alt","value","onChange","map","c","key","Card","title","total","increment","icon","icon2","color","Intl","NumberFormat","format","propType","PropTypes","string","isRequired","number","CardStats","data","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","List","countryInfo","flag","Table","MapChart","useState","setData","colorScale","scaleQuantile","domain","d","range","useEffect","valueInfo","name","iso3","projectionConfig","rotate","scale","stroke","strokeWidth","length","geography","geographies","geo","find","s","properties","ISO_A3","rsmKey","fill","LoadingScreen","App","setcountry","setcountries","url","isMounted","useRef","loading","error","state","setState","current","Axios","get","then","resp","catch","useAxios","fetch","json","e","target","Map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a186f46d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport './style.css';\n\nexport const ToolBar = ({ countries, country, handleCountryChange}) => {\n\n    return (\n        <>\n                <div className=\"navbar\">\n                <div className=\"navbar__brand\">\n                 <img className=\"brand__img\" src='https://www.flaticon.com/svg/static/icons/svg/2785/2785819.svg' alt=\"corona virus\"></img>\n                 <span className=\"brand__text\">Tracker</span>\n                </div>\n                <div className=\"navbar__card\">\n                     <select value={country} onChange={handleCountryChange}>\n                         <option >World Wide</option>\n                         {countries.map(c => (\n                             <option key={c.country}>{c.country}</option>\n                         ))}\n                     </select>\n                </div>\n             </div>\n        </>\n    )\n}\n\nToolBar.propTypes = {\n    countries: PropTypes.array.isRequired,\n    country: PropTypes.string.isRequired,\n    hadleCountryChange: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\nexport const Card = ({title, total, increment, icon, icon2, color}) => {\n    return (\n        <div className=\"card\">\n           <div className=\"card__body\">\n           <h4 className=\"card__title\">{title}</h4>\n            <h3 className={color}>\n              {\n                  increment === 0 ? (\n                    <i className=\"far fa-smile\"></i>\n                  ):(\n\n                  <span>+{increment && new Intl.NumberFormat(\"es-ES\").format(increment)} <i className={icon2}></i></span>\n                  )\n              }\n            </h3>\n            <span className=\"card__text\">\n                {new Intl.NumberFormat(\"es-ES\").format(total)} total <i className={icon}></i>\n            </span> <br/>\n           </div>  \n        </div>\n    )\n}\nCard.propType = {\n  title: PropTypes.string.isRequired,\n  total: PropTypes.number,\n  increment: PropTypes.number,\n  icon: PropTypes.string,\n  icon2: PropTypes.string,\n  color: PropTypes.string\n}"," import React from 'react'\nimport { Card } from '../Layouts/cards';\nimport PropTypes from 'prop-types'\nimport './style.css'\n \n export const CardStats = ({data}) => {\n     return (\n         <div className=\"app__cardsStats\">\n             <Card  title='Coronavirus cases' total={data.cases} increment={data.todayCases} icon={'fas fa-viruses'} icon2={'fas fa-angle-double-up'}  color={'redcolor'}/>\n             <Card  title='Deaths' total={data.deaths} increment={data.todayDeaths} icon={'fas fa-skull-crossbones'} icon2={'fas fa-angle-double-up'}  color={'redcolor'} />\n             <Card title='Recovered' total={data.recovered} increment={data.todayRecovered} icon={'fas fa-ambulance'} icon2={'fas fa-angle-double-up'}  color={'greencolor'}/>\n         </div>\n     )\n }\n \n CardStats.propTypes = {\n     data: PropTypes.object.isRequired\n }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './style.css'\nexport const List = ({countries}) => {\n    return (\n     <>\n                <div className=\"app__list\">\n                <div className=\"list\">\n                    <h3 className=\"list__title\">Cases By Country</h3>\n                    <ul className=\"list__ul\">\n                    {\n                            countries.map(country => (\n                                <li className=\"list__li\" key={country.country}>\n                                   <div>\n                                       <img className=\"list__flag\" src={country.countryInfo.flag} alt={country.country} />\n                                   <span>{country.country}</span>\n                                   </div>\n                                    <span>{country.cases}<i className=\"fas fa-virus list__cases\"></i></span>\n                                </li>\n                            ))\n                        }\n                    </ul>\n                </div>\n            </div>\n     </>\n    )\n}\n\n    List.propTypes = {\n        countries: PropTypes.array.isRequired,\n    }","import React from 'react'\n\nexport const Table = () => {\n    return (\n        <table>\n            <tbody>\n            <tr>\n                <td className=\"td__1\"></td>\n                <td className=\"td__2\"></td>\n                <td className=\"td__3\"></td>\n                <td className=\"td__4\"></td>\n                <td className=\"td__5\"></td>\n                </tr>\n                <tr>\n                <td>100- 499</td>\n                <td> 500 - 999</td>\n                <td> 1.000- 1.999</td>\n                <td> 10.000 - 19.999</td>\n                <td>  +20.000</td>\n                </tr>\n            </tbody>\n     </table>\n    )\n}\n","import React, { useEffect, useState } from \"react\";\nimport { scaleQuantile } from \"d3-scale\";\nimport {Table} from './Table'\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  ZoomableGroup,\n  Graticule,\n} from \"react-simple-maps\";\nimport PropTypes from 'prop-types'\nimport './style.css'\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n  \n  const MapChart = ({countries}) => {\n    const [data, setData] = useState([]);\n    \n    const colorScale = scaleQuantile()\n      .domain(data.map(d => d.cases))\n      .range([   \n        \"#ffedea\",\n        \"#ffcec5\",\n        \"#ffad9f\",\n        \"#ff8a75\",\n        \"#ff5533\",\n        \"#e2492d\",\n        \"#be3d26\",\n        \"#9a311f\",\n        \"#782618\",\n    ]);\n      \n  useEffect(() => {\n    \n   const valueInfo = countries.map(country =>({\n      name: country.country,\n      cases: country.cases,\n      iso3: country.countryInfo.iso3,\n      deaths: country.deaths,\n      recovered: country.recovered\n    }));\n\n    setData(valueInfo)\n  \n  },[countries]);  \n  return (\n    <div className=\"app__map\">\n        <div className=\"card__map\">\n          <h2 className=\"map__title\">World Map</h2>\n          <div className=\"map__table\">\n             <Table />\n          </div>\n        <ComposableMap\n                projectionConfig={{\n                    rotate: [-10, 0, 0],\n                    scale: 160\n                }}\n                >\n                <ZoomableGroup>\n                <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                {data.length > 0 && (\n                    <Geographies geography={geoUrl}>\n                    {({ geographies }) =>\n                        geographies.map((geo) => {\n                        const d = data.find((s) => s.iso3 === geo.properties.ISO_A3);\n                        return (\n                            <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            fill={d ? colorScale(d.cases) : \"#ffedea\"}\n                            />\n                        );\n                        })\n                    }\n                    </Geographies>\n                )}\n                </ZoomableGroup>\n                </ComposableMap>\n        </div>\n    </div>\n  );\n};\n\nMapChart.propTypes = {\n  countries: PropTypes.array.isRequired,\n}\n\n\nexport default MapChart;","import React from 'react'\nimport './style.css'\nexport const LoadingScreen = () => {\n    return (\n        <div className=\"loading__screend\">\n            <div className=\"loading__container\">\n                <img  className=\"loading__img\" src='https://www.flaticon.com/svg/static/icons/svg/2760/2760528.svg' alt=\"corona virus tracker\"/>\n            </div>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { ToolBar } from './components/ToolBar';\nimport { CardStats } from './components/Statistics';\nimport { List } from './components/List';\nimport MapChart from './components/Map'\nimport {useAxios} from './hooks/useAxios/useAxios'\nimport { LoadingScreen } from './components/Layouts/Loading';\n\nfunction App() {\n\n  const [country, setcountry] = useState('World Wide')\n  const [countries, setcountries] = useState([])\n \n  const url = country === 'World Wide' ? 'https://disease.sh/v3/covid-19/all'\n  : `https://disease.sh/v3/covid-19/countries/${country}`;\n\n  const {loading, data} = useAxios(url)\n \n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/countries/')\n    .then(resp => resp.json())\n    .then(data=>{\n      setcountries(data)\n    })\n  }, [])\n\n  const handleCountryChange = (e)=>{\n    setcountry(e.target.value) \n  }   \n    return (\n    <div className=\"app\">\n     {\n       loading ? (\n          <LoadingScreen />\n       ): (\n         <>\n             <header className=\"app__header\">\n            <nav className=\"app__nav\">\n              <ToolBar countries={countries} country={country} handleCountryChange={handleCountryChange}/>\n            </nav>\n        </header>\n        <main className=\"app__main\">\n          <div className=\"app__statics\">\n              <CardStats data={data}/>\n              <MapChart countries= {countries}/>      \n          </div>\n            <List countries={countries}/>\n        </main>\n        </>\n       )\n     }\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios'\n\nexport const useAxios = ( url ) => {\n    \n    const isMounted = useRef(true);\n    const [state, setState] = useState({ data: null, loading: true, error: null });\n\n    useEffect( () => {\n        return () => {\n            isMounted.current = false;\n        }\n    }, [])\n\n\n    useEffect( () => {\n\n        setState({ data: null, loading: true, error: null });\n\n        Axios.get( url )\n            .then( resp => resp.data)\n            .then( data => {\n\n                if ( isMounted.current ) {\n                    setState({\n                        loading: false,\n                        error: null,\n                        data\n                    });\n                }\n\n            })\n            .catch( () => {\n                setState({\n                    data: null,\n                    loading: false,\n                    error: 'No se pudo cargar la info'\n                })\n            })\n\n    },[url])\n\n    return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}